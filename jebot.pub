#!/usr/bin/perl -w

# -----------------------------------------------------------------------------
#
# JEBot - a Perl-based Discord Bot
# Copyright (C) 2022 - John Bradley (userjack6880)
#
# jebot
#   primary bot script
#
# Available at: https://github.com/userjack6880/jebot
#
# -----------------------------------------------------------------------------
#
# Thie file is part of the JEBot, a Perl-based Discord bot.
#
# JEBot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------

use strict;

use lib "lib";
use dclient;
use yahtzee;

use JSON;
use Switch;
use File::Random qw/random_line/;
use File::Slurp;
use Text::Padding;

my $token = 'ODYyMzQ2MzI4NzY3OTg3NzIy.YOXAmg.r96ZL4mEvhthYCm76idp3ptoujU';

my @auth_user = read_file("auth_users", chomp => 1);

my %commands_hidden = map{$_=>1} qw(setstatus servlist veonik introduce add_excuse add_floridaman add_fortune add_auth rm);

my $yahtzee = yahtzee->new();

my $bot = new dclient(
  token => $token,
  commands => {
    'commands' => sub {
      my ($bot, $args, $msg, $channel, $guild) = @_;
      if ($msg->{author}{id} ~~ @auth_user) { 
        $bot->say($channel->{id}, join("   ", map {"`$_`"} sort keys %{$bot->commands}));
      } else { 
        $bot->say($channel->{id}, join("   ", map {"`$_`"} sort grep {!$commands_hidden{$_}} keys %{$bot->commands})); 
      }
    },
  },
  status => "with Bits!"
);


$bot->add_commands(

  # hidden: set status of bot
  'setstatus' => sub {
    my ($bot, $args, $msg, $channel, $guild) = @_;
    return unless $msg->{author}{id} == $guild->{owner_id};

    # send "status update" op
    $bot->websocket_send(3, {
      since => undef,
      game => {
        name => $args,
        type => 0
      },
    status => "online",
    afk => "false"
    });
  },

  # hidden: list servers
  'servlist' => sub {
    my ($bot, $args, $msg, $channel, $guild) = @_;
    return unless $msg->{author}{id} ~~ @auth_user;

    my @guild_names;
    foreach my $id (keys %{$bot->guilds}) {
      my $g = $bot->api_sync(GET => "/guilds/$id");
      my $n = $g->{"name"};
      push @guild_names, $n;
    }
    $bot->say($channel->{id}, join("   ", map {"`$_`"} sort @guild_names));
  },

  # general help commands
  'help' => sub {
    my ($bot, $args, $msg, $channel, $guild) = @_;
    my @wrds = split / /, $msg->{content};
    my $cmd = $wrds[1] // 'none';
    if($cmd eq "commands")      { $bot->say($channel->{id}, "`commands`: list commands"); }
    elsif($cmd eq "excuse")     { $bot->say($channel->{id}, "`excuse`: generates a random excuse"); }
    elsif($cmd eq "floridaman") { $bot->say($channel->{id}, "`floridaman`: presents a real floridaman story"); }
    elsif($cmd eq "fortune")    { $bot->say($channel->{id}, "`fortune`: tells a fortune"); }
    elsif($cmd eq "powerball")  { $bot->say($channel->{id}, "`powerball`: not really powerball, you won't win anything"); }
    elsif($cmd eq "yahtzee")    { $bot->say($channel->{id}, "`yahtzee`: plays a game of yahtzee - issue bare command for instructions"); }
    elsif($cmd eq "flip")       { $bot->say($channel->{id}, "`flip n`: flips a coin - n: (default 1) number of coins to flip"); }
    elsif($cmd eq "roll")       { $bot->say($channel->{id}, "`roll d n`: roll a die - d: (default 6) sides of die n: (default 1) number of die"); }
    elsif($cmd eq "help")       { $bot->say($channel->{id}, "`help`: gives an expalantion of the following commands: " 
                                . join("   ", map {"`$_`"} sort grep {!$commands_hidden{$_}} keys %{$bot->commands}));
                                }
    elsif($cmd eq "veonik")     { $bot->say($channel->{id}, "fuck'em"); }
    else                        { $bot->say($channel->{id}, "`help`: gives an expalantion of the following commands: " 
                                . join("   ", map {"`$_`"} sort grep {!$commands_hidden{$_}} keys %{$bot->commands}));
                                }
  },

  # hidden: add authorized users
  'add_auth' => sub {
    my ($bot, $args, $msg, $channel, $guild) = @_;
    return unless $msg->{author}{id} ~~ @auth_user;
    open (my $fh, '>>', 'auth_users') or die "Could not open file 'auth_users' $!";
    my $txt = $msg->{content};
    $txt =~ s/\!add\_auth //;
    print $fh "$txt\n";
    close $fh;
    $bot->say($channel->{id}, "new user authorized");
  },

  # Powerball
  'powerball' => sub {
    my ($bot, $args, $msg, $channel, $guild) = @_;
    my $balls = int(rand(10)).int(rand(10))." ".
                int(rand(10)).int(rand(10))." ".
                int(rand(10)).int(rand(10))." ".
                int(rand(10)).int(rand(10))." ".
                int(rand(10)).int(rand(10))." (".
                int(rand(10)).int(rand(10)).")";
    $bot->say($channel->{id}, "we've drawn... $balls");
  },

  # Flip Coin
  'flip' => sub {
    my ($bot, $args, $msg, $channel, $guild) = @_;
    my @wrds = split / /, $msg->{content};
    my $repeat = '1';
    if ($wrds[1]) { if ($wrds[1] < 331) { $repeat = $wrds[1] if $wrds[1] =~ /^\d+$/; }}
    my $statement;

    while ($repeat > 0) {
      my $flip = int(rand(2));
      $statement .= "`tails` " if $flip == 0;
      $statement .= "`heads` " if $flip == 1;
      $repeat--;
    }

    $bot->say($channel->{id}, $statement);
  },

  # Roll Die (Coin Flip Variant)
  'roll' => sub {
    my ($bot, $args, $msg, $channel, $guild) = @_;
    my @wrds = split / /, $msg->{content};
    my $repeat = '1';
    my $sides = '6';
    if ($wrds[1]) { if ($wrds[1] < 331) { $sides = $wrds[1] if $wrds[1] =~ /^\d+$/; }}
    if ($wrds[2]) { if ($wrds[2] < 331) { $repeat = $wrds[2] if $wrds[2] =~ /^\d+$/; }}
    my $statement;

    while ($repeat > 0) {
      my $roll = int(rand($sides)+1);
      $statement .= "`$roll` ";
      $repeat--;
    }

    $bot->say($channel->{id}, $statement);
  },

  # Yahtzee
  'yahtzee' => sub {
    my ($bot, $args, $msg, $channel, $guild) = @_;
    my @wrds = split / /, $msg->{content};
    my $cmd = $wrds[1] // 'none';
    my $api_return = $bot->api_sync(GET => "/users/$msg->{author}{id}");
    my $username = $api_return->{"username"};
    my $gameID = $guild->{id}.$channel->{id};
    my $userID = $msg->{author}{id};
    my $cmd2 = $wrds[2] // '';
    if($cmd eq "none") {
      $bot->say($channel->{id}, "\n**Objective**\n".
                               "Roll dice to get the highest score after all 13 rounds.\n".
                               "**GamePlay**\n".
                               "- Roll up to 3 times each turn to rack up the best possible score.\n".
                               "- Decide which dice combo you're going for.\n".
                               "- After each turn, choose one category to assign dice to for a score.\n".
                               "**Scoring**\n".
                               "Upper Scores\n".
                               "- Ones, Twos, etc...: Sum of dices with ones, twos, etc... on the face.\n".
                               "- Upper Score Bonus: 35 points if sum of upper scores is 63 points.\n".
                               "Lower Scores\n".
                               "- 3 of a Kind, 4 of a Kind: Total of all dice.\n".
                               "- Full House (3 of a kind and pair): 25 points\n".
                               "- Low Straight (4 consecutive die): 30 points\n".
                               "- High Straight (5 consecutive die): 40 points\n".
                               "- Yahtzee (5 of a kind): 50 points\n".
                               "- Chance (any 5 die): Total of all dice.\n".
                               "- Yahtzee Bonus: If Yahtzee is already scored, you roll a second Yahtzee, and if the corresponding Upper Score category is filled, ".
                               "you may assign the roll to a Lower Score category. If there are no free categories, the bonus is lost. Additional Yahtzees are lost.\n".
                               "**Commands**\n".
                               "`!yahtzee start` Start a new game.\n".
                               "`!yahtzee join` Join game.\n".
                               "`!yahtzee leave` Leave game.\n".
                               "`!yahtzee roll` Roll die.\n".
                               "`!yahtzee roll 1,2,3,4,5` Roll die except specified.\n".
                               "`!yahtzee apply [category]` Apply roll to category.\n".
                               "Valid Categories:\n`ones` `twos` `threes` `fours` `fives` `sixes` `3ofk` `4ofk` `sstra` `lstra` `fh` `yaht` `chance` `lost`\n".
                               "`!yahtzee score` Show current game scores.\n".
                               "`!yahtzee end` End current game.\n");
    }
    if($cmd eq "start") {
      my $status = $yahtzee->create_game($userID, $username, $gameID);
      $bot->say($channel->{id}, "Game already started!") if $status == 1;
      $bot->say($channel->{id}, "Game created!") if $status == 0;
    }
    if($cmd eq "join") {
      my $status = $yahtzee->add_user($userID, $username, $gameID);
      $bot->say($channel->{id}, "There is no game to join. Try `!yahtzee start`.") if $status == 2;
      $bot->say($channel->{id}, "$username is already in the game!") if $status == 1;
      $bot->say($channel->{id}, "$username joined the game!") if $status == 0;
    }
    if($cmd eq "leave") {
      my $status = $yahtzee->remove_user($userID, $gameID);
      $bot->say($channel->{id}, "There is no game to leave.") if $status == 2;
      $bot->say($channel->{id}, "$username isn't in the game!") if $status == 1;
      $bot->say($channel->{id}, "$username left the game!") if $status == 0;
    }
    if($cmd eq "roll") {
      my $status = $yahtzee->roll($gameID, $userID, $cmd2);
      $bot->say($channel->{id}, "You can't roll anymore.") if $status == 2;
      $bot->say($channel->{id}, "Not in a game.") if $status == 1;
      $bot->say($channel->{id}, "$username roll : `".$yahtzee->get_roll($gameID, $userID)."`") if $status == 0;
    }
    if($cmd eq "apply") {
      my $status = $yahtzee->apply($gameID, $userID, $cmd2);
      $bot->say($channel->{id}, "You need to roll first.") if $status == 2;
      $bot->say($channel->{id}, "You cannot apply that roll to this category.") if $status == 1;
      $bot->say($channel->{id}, "Roll applied. Your score is ".$yahtzee->calculate_score($gameID,$userID).".") if $status == 0;
    }
    if($cmd eq "score") {
      if ($cmd2) {
        my $status_a = $yahtzee->apply($gameID, $userID, $cmd2);
        $bot->say($channel->{id}, "You need to roll first.") if $status_a == 2;
        $bot->say($channel->{id}, "You cannot apply that roll to this category.") if $status_a == 1;
        $bot->say($channel->{id}, "Roll applied. Your score is ".$yahtzee->calculate_score($gameID,$userID).".") if $status_a == 0;
      }
      my $status = $yahtzee->get_gameStatus($gameID);
      if ($status == 1) { $bot->say($channel->{id}, "There is no game!"); }
      else {
        my @userlist;

        foreach my $t_userID (keys %{$yahtzee->{$gameID}}) {
          next if $t_userID eq 'gamestatus';
          push(@userlist, $userID);
        }
        if (!$userlist[0]) { $bot->say($channel->{id}, "There are no users!"); }
        else {
          my $scoreCardText = "```";
          my $pad = Text::Padding->new;
          foreach my $t_userID (@userlist) {
            print "userID: $t_userID\n\n";
            my $a = $bot->api_sync(GET => "/users/$t_userID");
            my $u = $pad->left($a->{"username"}, 16);
            my $scoreCard = $yahtzee->get_scoreCard($gameID,$t_userID);
            my $score  = $pad->left($yahtzee->calculate_score($gameID,$t_userID),4);
            my $ones   = $pad->left($scoreCard->{ones}{score},4);
            my $twos   = $pad->left($scoreCard->{twos}{score},4);
            my $threes = $pad->left($scoreCard->{threes}{score},4);
            my $fours  = $pad->left($scoreCard->{fours}{score},4);
            my $fives  = $pad->left($scoreCard->{fives}{score},4);
            my $sixes  = $pad->left($scoreCard->{sixes}{score},4);
            my $tofk   = $pad->left($scoreCard->{'3ofk'}{score},4);
            my $fofk   = $pad->left($scoreCard->{'4ofk'}{score},4);
            my $sstra  = $pad->left($scoreCard->{sstra}{score},4);
            my $lstra  = $pad->left($scoreCard->{lstra}{score},4);
            my $fh     = $pad->left($scoreCard->{fh}{score},4);
            my $yaht   = $pad->left($scoreCard->{yaht}{score},4);
            my $chance = $pad->left($scoreCard->{chance}{score},4);
            $scoreCardText .= " $u |     Score | $score \n".
                              " Upper Scores     | Lower Scores   \n".
                              "      Ones | $ones | 3-of-Kind | $tofk\n".
                              "      Twos | $twos | 4-of-Kind | $fofk\n".
                              "    Threes | $threes | FullHouse | $fh\n".
                              "     Fours | $fours | SStraight | $sstra\n".
                              "     Fives | $fives | LStraight | $lstra\n".
                              "     Sixes | $sixes |   Yahtzee | $yaht\n".
                              "                  |    Chance | $chance\n".
                              " ------------------------------------\n";
          }
          $scoreCardText .= "```";
          $bot->say($channel->{id}, $scoreCardText);
        }
      }
    }
    if($cmd eq "end") {
      my $status = $yahtzee->end_game($gameID);
      $bot->say($channel->{id}, "No game to end.") if $status == 1;
      $bot->say($channel->{id}, "Thanks for playing!") if $status == 0;
    }
  },

  # Excuse Generator Commands
  'excuse' => sub {
    my ($bot, $args, $msg, $channel, $guild) = @_;
    my $excuse = random_line('excuse');
    $bot->say($channel->{id}, $excuse);
  },

  'add_excuse' => sub {
    my ($bot, $args, $msg, $channel, $guild) = @_;
    return unless $msg->{author}{id} ~~ @auth_user;
    open (my $fh, '>>', 'excuse') or die "Could not open file 'excuse' $!";
    my $txt = $msg->{content};
    $txt =~ s/\!add\_excuse //;
    print $fh "$txt\n";
    close $fh;
    $bot->say($channel->{id}, "great excuse!");
  },

  # Florida Man
  'floridaman' => sub {
    my ($bot, $args, $msg, $channel, $guild) = @_;
    my $action = random_line('floridaman');
    $bot->say($channel->{id}, "Florida man ".$action);
  },

  'add_floridaman' => sub {
    my ($bot, $args, $msg, $channel, $guild) = @_;
    return unless $msg->{author}{id} ~~ @auth_user;
    open (my $fh, '>>', 'floridaman') or die "Could not open file 'floridaman' $!";
    my $txt = $msg->{content};
    $txt =~ s/\!add\_floridaman //;
    print $fh "$txt\n";
    close $fh;
    $bot->say($channel->{id}, "Florida Man did another thing!");
  },

  # Fortune
  'fortune' => sub {
    my ($bot, $args, $msg, $channel, $guild) = @_;
    my $fortune = random_line('fortune');
    $bot->say($channel->{id}, $fortune);
  },

  'add_fortune' => sub{
    my ($bot, $args, $msg, $channel, $guild) = @_;
    return unless $msg->{author}{id} ~~ @auth_user;
    open (my $fh, '>>', 'fortune') or die "Could not open file 'fortune' $!";
    my $txt = $msg->{content};
    $txt =~ s/\!add\_fortune //;
    print $fh "$txt\n";
    close $fh;
    $bot->say($channel->{id}, "another wise fortune");
  },

  # Introducing JEBot
  'introduce' => sub {
    my ($bot, $args, $msg, $channel, $guild) = @_;
    my $ann = $msg->{author}{username};
    my $srv = $guild->{name};

    $bot->say($channel->{id}, "Thank you, $ann.\n My name is JEBot, a Discord bot that serves as a synthetic version of userjack6880, also known as JEB. I promise I will not take over $srv as your robot overlord.");
  },

  # easteregg commands
  'veonik' => sub {
    my ($bot, $args, $msg, $channel, $guild) = @_;
    $bot->say($channel->{id}, "fuck \@veonik");
  },

  'rm' => sub {
    my ($bot, $args, $msg, $channel, $guild) = @_;
    $bot->say($channel->{id}, "this isn't bash");
  },

);


print "\033[2J"
     ."\033[0;0H"
     ."Welcome to JEBot!\n\n";

$bot->connect();
AnyEvent->condvar->recv;
